import React, { useState, useEffect } from 'react'
import "./SIPG.css"
import axios from 'axios';
import Highcharts from 'highcharts';
import HighchartsReact from 'highcharts-react-official';
import HighchartsHeatmap from "highcharts/modules/heatmap"; 


HighchartsHeatmap(Highcharts);
    // Calculate the starting weekday index (0-6 of the first date in the given
    // array)
    // before and after the dataset is plotted.
function generateChartData(data:any) {
    const firstWeekday = new Date(data[0].date).getDay(),
        monthLength = data.length,
        lastElement = data[monthLength - 1].date,
        lastWeekday = new Date(lastElement).getDay(),
        lengthOfWeek = 6,
        emptyTilesFirst = firstWeekday,
        chartData = [];

    // Add the empty tiles before the first day of the month with null values to
    // take up space in the chart
    for (let emptyDay = 0; emptyDay < emptyTilesFirst; emptyDay++) {
        chartData.push({
            x: emptyDay,
            y: 5,
            value: null,
            date: null,
            custom: {
                empty: true
            }
        });
    }

    // Loop through and populate with temperature and dates from the dataset
    for (let day = 1; day <= monthLength; day++) {
        // Get date from the given data array
        const date = data[day - 1].date;
        // Offset by thenumber of empty tiles
        const xCoordinate = (emptyTilesFirst + day - 1) % 7;
        const yCoordinate = Math.floor((firstWeekday + day - 1) / 7);
        const id = day;
				const price = data[day - 1].price;
        const y_co = data[day -1].x
        const color = data[day -1].color
        // Get the corresponding temperature for the current day from the given
        // array
 if(price == '')
        {
         chartData.push({
            x: y_co,
            y: 0,
            value: null,
            date: null,
            custom: {
                empty: true
            },
           color: '#fff'
        });
        
        }
        
        else
        {
        
        console.log(price," ",yCoordinate)
         chartData.push({
            x: y_co,
            y: 5 - yCoordinate,
            value: price,
            date: new Date(date).getTime(),
            custom: {
                monthDay: id
            },
            color: color
        });
       
        }
    }

    // Fill in the missing values when dataset is looped through.
    const emptyTilesLast = lengthOfWeek - lastWeekday;
    for (let emptyDay = 1; emptyDay <= emptyTilesLast; emptyDay++) {
        chartData.push({
            x: (lastWeekday + emptyDay) % 7,
            y: 0,
            value: null,
            date: null,
            custom: {
                empty: true
            }
        });
    }
    return chartData;
}

export default function SIPG() {
  const choices =
    [
      { text: 'Physical Gold', value: 'physical_gold' },
      { text: 'Digital Gold', value: 'digital_gold' }
    ]
  const [checked, setChecked] = useState(false);
  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  const [result, setresult] = useState({})
  const [last, setlast] = useState([{}])
  const [physhow, setphyshow] = useState(false)
  const [digishow, setdigishow] = useState(false)
  const [high, sethigh] = useState([{}])
  const [day, setday] = useState([{}])
  const [date, setdate] = useState<number>()
  const [url, seturl] = useState<string>('')
  const [suggestion, setsuggestion] = useState<string>('')
  const [type, settype] = useState('')
  const [sameday, setsameday] = useState('')
  const [heatmap, setheatmap] = useState({})
  const handleChange = (event: any) => {
    setChecked(event.currentTarget.checked)
  }




  useEffect(() => {
    axios.get(`${url}`).then(data => {
      console.log(url)
      const outerHtmlElement: any = data.data[0];
      var Today_22_1 = outerHtmlElement.highest
      sethigh([Today_22_1])
      var Today_values = outerHtmlElement.on_price
      setday([Today_values])
      var same_day =  Today_values['day'][0]
      setsameday(same_day)
      var line_chart = outerHtmlElement.Linechart_data
      var last_few = outerHtmlElement.last_few_days
      var heatmap_data = outerHtmlElement.heatmap_data
      var suggest = outerHtmlElement.result
      setsuggestion(suggest)
      const chartData = generateChartData(heatmap_data);
      setheatmap({
        chart: {
        type: 'heatmap'
    },

    title: {
        text: 'Gold Rate Variation in Last 45 days',
        align: 'center'
    },

    accessibility: {
        landmarkVerbosity: 'one'
    },

    tooltip: {
        enabled: true,
        outside: true,
        zIndex: 20,
        headerFormat: '',
        pointFormat: '{#unless point.custom.empty}{point.date:%A, %b %e, %Y}{/unless}',
        nullFormat: 'No data'
    },

    xAxis: {
        categories: weekdays,
        opposite: true,
        lineWidth: 26,
        offset: 13,
        lineColor: 'rgba(27, 26, 37, 0.2)',
        labels: {
            rotation: 0,
            y: 20,
            style: {
                textTransform: 'uppercase',
                fontWeight: 'bold'
            }
        },
        accessibility: {
            description: 'weekdays',
            rangeDescription: 'X Axis is showing all 7 days of the week, starting with Sunday.'
        }
    },

    yAxis: {
        min: 0,
        max: 5,
        accessibility: {
            description: 'weeks'
        },
        visible: false
    },

    legend: {
    enabled: false,
        align: 'right',
        layout: 'vertical',
        verticalAlign: 'middle'
    },

    colorAxis: {
        min: 0,
        stops: [
            [0.2, 'white']
           
        ],
        labels: {
            format: '{value}'
        }
    },

    series: [{
        keys: ['x', 'y', 'value', 'date', 'id'],
        data: chartData,
        nullColor: 'rgba(196, 196, 196, 0.2)',
        borderWidth: 2,
        borderColor: 'rgba(196, 196, 196, 0.2)',
        dataLabels: [{
            enabled: true,
            format: '{point.value}',
            style: {
                textOutline: 'none',
                fontWeight: 'normal',
                fontSize: '1rem'
            },
            y: 4
        }]
    }]})
      setresult(
       { 
        chart: {
          zoomType: 'x'
      },
      title: {
          text: 'Gold Rate Variation Since The Purchased',
          align: 'center'
      },
     
      xAxis: {
          type: 'datetime'
      },
      yAxis: {
          title: {
              text: 'Gold rate(per gram)'
          }
      },
      legend: {
          enabled: false
      },
      plotOptions: {
        series: {
            marker: {
                enabled: false,
                states: {
                    hover: {
                        enabled: false
                    }
                }
            }
        }
    },
      series: line_chart
       }
      )
      setlast(last_few)
      console.log(type)
      if(type == "physical_gold")
        {
          setphyshow(true)
          setdigishow(false)
        }
        
      else{
        setphyshow(false)
        setdigishow(true)
      }
    }).catch(error => {
      console.log(error)
    })
  }, [url]);
 console.log(day)
  return (
    <div className='sipg'>
      <div className='sipg-input'>
      <div className='sipg-input1'>
        {choices.map((choice, index) => (
          <label key={index}>
            <input type="radio"
              name="vote"
              value={choice.value}
              className={choice.value}
              key={index}
              onClick={(event: any) => settype(event.target.value)} />
            {choice.text}
          </label>
        ))}
        </div>
        <div className='sipg-input2'>
        <h3>When did you purchase last???</h3>
        <input type="date" onChange={(event) => setdate(new Date(event.target.value).valueOf() / 1000)} />
        </div>
        <div className='sipg-input2'>
        <label>
          <input type="checkbox" checked={checked} onChange={handleChange} />
          Check this if never purchased before...
        </label>
        </div>
        <div className='sipg-input2'>
        <button className="find" type="button" onClick={() => seturl("http://localhost:5000/sipg-today/" + type + "/" + date)}>Find Out!!!</button>
        </div>
        </div>
        {physhow ? <div className='sipg-output'>
         
                <div className='on_day'>
          <text className='sipg-title'>{sameday}</text>
          <table id="on_day">
                <tr>
                    <th>Date</th>
                    <th>Gold Price(10 Karat)</th>
                    <th>Gold Price(18 Karat)</th>
                    <th>Gold Price(20 Karat)</th>
                    <th>Gold Price(22 Karat)</th>
                    <th>Gold Price(24 Karat)</th>
                </tr>
             
                { day.map((val :any, key :any) => {
                    return (
                        <tr>
                           <td>{val['date'][0]}</td>
                            <td>{val['Gold Price(10 Karat)'][0]}</td>
                            <td>{val['Gold Price(14 Karat)'][0]}</td>
                            <td>{val['Gold Price(18 Karat)'][0]}</td>
                            <td>{val['Gold Price(22 Karat)'][0]}</td>
                            <td>{val['Gold Price(24 Karat)'][0]}</td>
                        </tr>
                    )
                })}
                        
                </table>
                </div>
                <div className='highest'>
          <text className='sipg-title'>Highest Amount Since The Purchase</text>
          <table id="highest">
                <tr>
                    <th>Date</th>
                    <th>Gold Price(10 Karat)</th>
                    <th>Gold Price(18 Karat)</th>
                    <th>Gold Price(20 Karat)</th>
                    <th>Gold Price(22 Karat)</th>
                    <th>Gold Price(24 Karat)</th>
                </tr>
             
                { high.map((val :any, key :any) => {
                    return (
                        <tr>
                           <td>{val['date']}</td>
                            <td>{val['Gold Price(10 Karat)']}</td>
                            <td>{val['Gold Price(14 Karat)']}</td>
                            <td>{val['Gold Price(18 Karat)']}</td>
                            <td>{val['Gold Price(22 Karat)']}</td>
                            <td>{val['Gold Price(24 Karat)']}</td>
                        </tr>
                    )
                })}
                        
                </table>
                </div>
                <div className='linechart'>
                <HighchartsReact highcharts={Highcharts} options={result} />
                </div>
                <div className='heatmap'>
                <HighchartsReact highcharts={Highcharts} options={heatmap} />
                </div>
                <div className='Result'>
                  <h1>{suggestion}</h1>
                </div>
                {/* <div className='last-content'>
                <text className='sipg-title'>Gold Rate Variation 30days From The Purchase</text>
                <table id="last">
                <tr>
                    <th>Date</th>
                    <th>Gold Price(24 Karat)</th>
                    <th>Gold Price(22 Karat)</th>
                    <th>Gold Price(20 Karat)</th>
                    <th>Gold Price(18 Karat)</th>
                    <th>Gold Price(10 Karat)</th>
                </tr>                                 
                    {Object.values(last).map((val :any) => (
                      <tr>
                      {Object.values(val).map((newval :any) => (
                        <td>{newval}</td>
                      ))}
                      </tr>
                        ))}
                 
                </table>
                </div> */}
        </div> : null}
        {
          digishow ? <div className='sipg-output'>
          
                <div className='on_day'>
          <text className='sipg-title'>{sameday}</text>
          <table id="on_day">
                <tr>
                    <th>Date</th>
                    <th>Gold Price</th>
                </tr>
             
                { day.map((val :any, key :any) => {
                    return (
                        <tr>
                           <td>{val['date'][0]}</td>
                            <td>{val['price'][0]}</td>
                        </tr>
                    )
                })}
                        
                </table>
                </div>
                <div className='highest'>
          <text className='sipg-title'>Highest Amount Since The Purchase</text>
          <table id="highest">
                <tr>
                    <th>Date</th>
                    <th>Gold Price</th>
                </tr>
             
                { high.map((val :any, key :any) => {
                    return (
                        <tr>
                           <td>{val['date']}</td>
                            <td>{val['price']}</td>
                        </tr>
                    )
                })}
                        
                </table>
                </div>
                  <div className='linechart'>
                <HighchartsReact highcharts={Highcharts} options={result} />
                </div>
                <div className='heatmap'>
                <HighchartsReact highcharts={Highcharts} options={heatmap} />
                </div>
                <div className='Result'>
                  <h2>{suggestion}</h2>
                </div>
                {/* <div className='last-content'>
                <text className='sipg-title'>Gold Rate Variation 30days From The Purchase</text>
                <table id="last">
                <tr>
                    <th>Date</th>
                    <th>Gold Price</th>

                </tr>                                 
                    {Object.values(last).map((val :any) => (
                      <tr>
                      {Object.values(val).map((newval :any) => (
                        <td>{newval}</td>
                      ))}
                      </tr>
                        ))}
                 
                </table>
                </div> */}
        </div> : null
        }
      
    </div>
  )
}


